# PROFILE file in the project contains copy of $PROFILE

# ⭐⭐⭐⭐⭐ ==> importance of functions

# Setting my Aliases --> scriping aliases are duplicated in Classes to have Aliacses unfolded in other environments
Set-Alias -Name 'cat' -Value Get-Content -Scope Global
Set-Alias -Name 'touch' -Value New-Item -Scope Global
Set-Alias -Name 'grep' -Value Select-String -Scope Global
Set-Alias -Name 'grep-r' -Value Search-StringRecurse -Scope Global # fn in this file                    ⭐⭐⭐⭐

Set-Alias -Name 'hist' -Value Get-History -Scope Global
Set-Alias -Name 'cls-hist' -Value Clear-History -Scope Global
Set-Alias -Name 'inv-hist' -Value Invoke-History -Scope Global
Set-Alias -Name 'help' -Value Get-Help -Scope Global
Set-Alias -Name 'h-gal' -Value Get-Alias -Scope Global # just gal -- get cmdlet for alias; gal -Definition -- <cmdlet Name> get all aliases for cmdlet

Set-Alias -Name 'rm' -Value Remove-Item -Scope Global
Set-Alias -Name 'inv' -Value Invoke-Item -Scope Global 
Set-Alias -Name 'ifEx' -Value Test-Path -Scope Global # checks if exists -- paths, files, variables
Set-Alias -Name 'prop' -Value Show-Object -Scope Global # requires PowerShellCookbook Module installed  ⭐⭐⭐⭐⭐

#------------------------- other -------------------------
Set-Alias -Name 'np' -Value Start-Notepad -Scope Global # fn in this file                               ⭐⭐⭐
Set-Alias -Name 'dnh' -Value Get-NetHelp -Scope Global # fn in this file                                  
Set-Alias -Name 'book' -Value Start-book -Scope Global # fn in this file                                ⭐⭐⭐
Set-Alias -Name 'start-M' -Value Start-FromStartMenu -Scope Global # Alias for function below           ⭐⭐⭐⭐
Set-Alias -Name 'cnde' -Value Show-Env -Scope Global # Alias for function below                         ⭐
Set-Alias -Name 'vrb' -Value Get-Verbs -Scope Global # Alias for function below                         ⭐
Set-Alias -Name 'gt' -Value Start-GoogleTranslate -Scope Global # Alias for function below              ⭐
Set-Alias -Name 'pwSof' -Value Search-StackOverflow -Scope Global # Alias for function from Holmes  mdl ⭐⭐⭐
Set-Alias -Name 'pwSofLast' -Value Get-LastSOFTopics -Scope Global # fn in this file                    ⭐

#-------------------------- fun --------------------------
Set-Alias -Name 'tk3' -Value Start-tekken3 -Scope Global # fn in this file 
Set-Alias -Name 'mk3' -Value Start-MK3 -Scope Global # fn in this file
Set-Alias -Name 'yt' -Value Start-YT -Scope Global # fn in this file

#having last output at hand
$PSDefaultParameterValues["Out-Default:OutVariable"] = "lstOut" #call it, of course $lstOut

# -------------------------- SETTING UP REQUIRED MODULES ------------------------------
# requiref modules are here. Yes to [A]ll  on install request  
# ⭐⭐⭐⭐⭐     
$modulesList = @('ImportExcel', 'PowerShellCookbook')
$modulesList | ForEach-Object {
    if (-not (Get-Module $_ -ListAvailable)) { Install-Module -Name $_ -AllowClobber }
}

# ------------------------------------- FUNCTIONS -------------------------------------
# functions for customization
##############################################################################
##
## From PowerShell Cookbook (O'Reilly) --> was taken as base and severely reworked: SR [2022-11-01]
## by Lee Holmes (http://www.leeholmes.com/guide)
##
##############################################################################
Set-StrictMode -Version 3

#  PROMPT
function prompt {
    # ⭐⭐⭐⭐
    $prevId = 0
    $id = 1
    $historyItem = Get-History -Count 1
    if ($historyItem) {
        $prevId = $historyItem.Id
        $id = $historyItem.Id + 1
    }
    # SR: core solution from https://stackoverflow.com/questions/20433867/git-ahead-behind-info-between-master-and-branch
    $currBr = git branch --show-current
    $compMain = git rev-list --left-right --count origin/main...origin/$currBr

    Write-Host -NoNewline -BackgroundColor Green -ForegroundColor Black `
        "[$(git branch --show-current)]±($($compMain[2]);$($compMain[0]))>>" 
    Write-Host -NoNewline -BackgroundColor DarkBlue -ForegroundColor White `
        "$(Get-Location | Split-Path -Qualifier)" "$(Get-Location | Resolve-Path -Relative) >>" 
    
    Write-Host -NoNewLine -BackgroundColor Yellow -ForegroundColor Black " PS:$prevId->"
    # identifying running time of the last command:
    $ms = $((
        (Get-History -Count 1).Duration 
        ).TotalMilliseconds / 1000 )
    Write-Host -NoNewLine -BackgroundColor Yellow -ForegroundColor Black "[$([math]::Round($ms,3))s]>>"
    Write-Host -NoNewLine -BackgroundColor DarkRed -ForegroundColor White " PS:$id >> "
    Write-Host -NoNewline -BackgroundColor Black -ForegroundColor Black "->"
    $host.UI.RawUI.WindowTitle = "$(Get-Location)"
    "`b"
}
#  SAVE SETTINGS
function save-settings {
    # Backs up settings from respective VS Code keybindings and from PS $PROFILE to files in ProjectSettings
    # ⭐⭐⭐⭐
    Get-Content 'C:\Users\Sergey\AppData\Roaming\Code\User\settings.json' > 'D:\Projects\PBI Tools\Power-BI-Version-Control-repository\ProjectSettings\vs_userSetings'
    Get-Content 'D:\Projects\PBI Tools\Power-BI-Version-Control-repository\.git\config' > 'D:\Projects\PBI Tools\Power-BI-Version-Control-repository\ProjectSettings\git_config'
    Get-Content 'C:\Users\Sergey\AppData\Roaming\Code\User\keybindings.json' > 'D:\Projects\PBI Tools\Power-BI-Version-Control-repository\ProjectSettings\vs_keybindings'
    Get-Content $PROFILE > 'D:\Projects\PBI Tools\Power-BI-Version-Control-repository\ProjectSettings\PROFILE'
}
function Show-Env {
    # Show / hide Conda Env ⭐
    ((conda info -e) | Where-Object { $_ -match '\*' }) 
} 
function Search-StringRecurse { Get-ChildItem -rec | grep @args } # from Holmes ⭐⭐⭐⭐⭐

# --------------------------
# other

function Get-NetHelp ([string] $PWSCmdletName) {
    # dnh
    # $PWSCmdletName -- name of PowerShell cmd-let for which you want to get .Net help
    ### When the Get-Member cmdlet doesn’t provide the information you need, the Microsoft documentation for a type is a great alternative. [Holmes, 128]
    # ⭐

    if ($PWSCmdletName -eq "") {
        Start-Process "https://learn.microsoft.com/en-us/dotnet/"
        exit
    }
    $PWSCmdletName = [scriptblock]::Create($PWSCmdletName).Invoke()[0].GetType().toString()
    Start-Process "https://learn.microsoft.com/en-us/search/?terms=$PWSCmdletName&scope=.NET"
}

function Start-Notepad { Start-Process notepad++ } # ⭐⭐⭐ example: Get-Help grep | clip && np
function Start-FromStartMenu ([string] $AppName) { Search-StartMenu $AppName | invoke-item }   # ⭐⭐⭐ requires PowerShellCookbook Module installed 

function Start-Book ([string] $book) {   
    # ⭐⭐⭐ 4 practice -- starts a script that opens a book. Just to skip explorers and mousclicks. 
    if ($book -eq "") 
    { Get-ChildItem "$home\Desktop\PS Launcher\" } 
    else { 
        $nm = ( Get-ChildItem "$home\Desktop\PS Launcher\"  | Select-Object Name | Where-Object Name -like "*$book*").Name; 
        &  "$home\Desktop\PS Launcher\$nm" 
    }
    # Write-Host "book = $book; nm = $nm"   
}
function Get-CommandForContext($context) {
    # [System.ComponentModel.Description("Context=Website")] --> tags other functions for this Fn could categorize them Holmes [328]
    Get-Command -CommandType Function |
    Where-Object { $_.ScriptBlock.Attributes |
        Where-Object { $_.Description -eq "Context=$context" } }
}
function Get-Verbs {    get-verb | clip && np   } # lists correct verbs in NotePad++. NP is fn in this file


# --------------------------
## functions for fun
function Start-tekken3 { Start-Process "https://www.retrogames.cc/psx-games/tekken-3.html" }
function Start-MK3 { Start-Process "https://www.retrogames.cc/psx-games/mortal-kombat-3.html" }
function Start-YT { Start-Process "https://youtube.com" }
function Get-LastSOFTopics ([string]$topic, [string]$numberOfAnswers) {
    $url = "https://api.stackexchange.com/2.0/questions/unanswered" +
            "?order=desc&sort=activity&tagged=$($topic)&pagesize=$($numberOfAnswers)&site=stackoverflow"
            $result = Invoke-RestMethod $url
            $result.Items | ForEach-Object { $_.Title; $_.Link; "" }
        }
function Start-GoogleTranslate ([string] $ToTranslate) {    Start-Process "https://translate.google.com/?sl=en&tl=uk&text=$($ToTranslate)&op=translate"   }        
