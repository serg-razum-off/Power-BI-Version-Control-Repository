# PROFILE file in the project contains copy of $PROFILE

# ======================================= SETTINGS ========================================
Set-StrictMode -Version Latest # for all scrips from PWS Cookbook use Strict Mode -VErsion 3
$ErrorActionPreference = "Stop"


# Setting my Aliases --> scriping aliases are duplicated in Classes to have Aliacses unfolded in other environments
# ⭐⭐⭐⭐⭐ ==> importance of functions

# ===================================== COMMON HELPERS =====================================
# functions-helpers
Function IIf($If, $IfTrue, $IfFalse) {
    # inline IF
    # src: https://stackoverflow.com/questions/25682507/powershell-inline-if-iif
    If ($If) { If ($IfTrue -is "ScriptBlock") { &$IfTrue } Else { $IfTrue } }
    Else { If ($IfFalse -is "ScriptBlock") { &$IfFalse } Else { $IfFalse } }
}
# ===================================== COMMON HELPERS: end =====================================



# ================== File System Helpers ============================
Set-Alias -Name 'cat' -Value Get-Content -Scope Global
Set-Alias -Name 'touch' -Value New-Item -Scope Global
Set-Alias -Name 'grep' -Value Select-String -Scope Global
Set-Alias -Name 'rm' -Value Remove-Item -Scope Global
Set-Alias -Name 'inv' -Value Invoke-Item -Scope Global 
Set-Alias -Name 'ifEx' -Value Test-Path -Scope Global # checks if exists -- paths, files, variables
Set-Alias -Name 'prop' -Value Show-Object -Scope Global # requires PowerShellCookbook Module installed  ⭐⭐⭐⭐⭐
Set-Alias -Name 'grid' -Value Out-GridView -Scope Global 


function cw { Write-Host $args }
function grepr { Get-ChildItem -rec | grep @args } # from Holmes    ⭐⭐⭐⭐⭐

# show only files (whereas ls gets files and folders)
function ll { Get-ChildItem -File @args } 
#TODO: figure out why 'PS> & PROFILE' or 'PS> . PROFILE' do not reload profile when called from script: function rlp {& $PROFILE}

# ⭐⭐⭐ list Errs in th session ⬇⬇
function lse { try { 0..($Error.Count - 1) | ForEach-Object { "[$($_)]--> [$($Error[$_])]" } } catch { "No Errs yet... bad worker"; $error.clear() } }   

# ⭐⭐⭐ displays details about requested Err ⬇⬇
function lsed ([int]$ErrIdx) { if ($null -ne $ErrIdx) { $Error[$ErrIdx] | Get-Error; break } Get-Error } 

# ⭐⭐⭐ closes all opened apps and shuts the PC down ⬇⬇
function shtd {     
    param(
        [parameter (Mandatory = $true)]         [ ValidateSet('RestartPC', 'ShutDownPC')]            [string] $TypeOf 
    )
    if ($TypeOf -eq 'ShutDownPC') 
    {	(get-process | Where-Object { $_.mainwindowtitle -ne "" -and $_.processname -ne "powershell" } ) | stop-process; stop-computer -computername localhost -Force }
        
    Restart-Computer     
        
}

# ================== File System Helpers: end ============================
    
# =================== GET HELP helpers ===========================
Set-Alias -Name 'help' -Value Get-Help -Scope Global 
Set-Alias -Name 'h-gal' -Value Get-Alias -Scope Global # just gal -- get cmdlet for alias; gal -Definition -- <cmdlet Name> get all aliases for cmdlet
Set-Alias -Name 'inv-hist' -Value Invoke-History -Scope Global
Set-Alias -Name 'chist' -Value Clear-History -Scope Global
Set-Alias -Name 'hist' -Value Get-History -Scope Global
#  --> gmo is a standard alias for this Get-Module
Set-Alias -Name 'vrb' -Value Get-Verbs -Scope Global # Alias for function below                        
# ⭐⭐⭐
Set-Alias -Name 'pwSof' -Value Search-StackOverflow -Scope Global # Alias for function from Holmes  mdl; param -- seartch str related to PowerShell
function pwSofLast ([string]$topic, [string]$numberOfAnswers) {
    # searches for last topics in SOF for any domain. Specify domain / topic with [str] param
    $url = "https://api.stackexchange.com/2.0/questions/unanswered" +
    "?order=desc&sort=activity&tagged=$($topic)&pagesize=$($numberOfAnswers)&site=stackoverflow"
    $result = Invoke-RestMethod $url
    $result.Items | ForEach-Object { $_.Title; $_.Link; "" }
}
# searches for installed module
function gemo ([string] $Name) { Get-Module -n $Name -ListAvailable } 

# gets paths from evn: (env: in powershell)
function genvr (
    [string] $serach) { ((Get-ChildItem env:) | Select-Object name, value | Where-Object { $_ -like "*$($serach)*" }) } # genv is occupied =(

# conda env
function genvc {
    
        ((conda info -e) | Where-Object { $_ -match '\*' }) 
} 
    
#gets all paths valid for modules
function genvm { $env:PSModulepath -split ';' }
# =================== GET HELP helpers: end ========================


# =================== DATA PROCESS helpers: start ========================
function csv2dt ($scv) {
    # returns DataTable
    # converts content of csv file into a System.Data.DataTable; $csv is object[] that should be derived by 
    #       $csv = Get-Content '.\Wheat Data-All Years.csv' -Force
    #       ConvertTo-Csv, etc
    # --------------- DataTable ---------------
    $columns = ($csv | Select-Object -First 1).split(',')
    $data = $csv | Select-Object -Skip 1	
    $sampleData = $data[0] -split ','

    $dt = New-Object System.Data.DataTable
    # $dt.Columns.AddRange($columns) # --> this adds all columns in one bulk but all datatypes are [stting]

    $columns | ForEach-Object -Begin { $i = 0 } -Process { if ($sampleData[$i] -match "[0-9]+.?[0-9]?") { [void]$dt.Columns.Add($_, [double]) } else { [void]$dt.Columns.Add($_, [string]) } $i++ }
    # $dt.Columns | ft
    $data | ForEach-Object { [void]$dt.Rows.Add($_.split(',')) }

    return , $dt; # explanation of return synx: https://stackoverflow.com/questions/35491390/powershell-function-will-not-return-datatable 
    
}
# =================== DATA PROCESS helpers: end ========================

#------------------------- Starters helpers -------------------------
# ⭐⭐⭐ np --> launches notepadd++
function np { Start-Process notepad++ } 
Set-Alias -Name 'dnh' -Value Get-NetHelp -Scope Global # fn in this file                                  
Set-Alias -Name 'book' -Value Start-book -Scope Global # fn in this file                                
function startm ([string] $AppName) { Search-StartMenu $AppName | invoke-item }   #                     ⭐⭐⭐ requires PowerShellCookbook Module installed 
Set-Alias -Name getm -Value Get-StartApps
function gt { Start-Process "https://translate.google.com/?sl=en&tl=uk&text=$($args -join ' ')&op=translate" } 
function gs { Start-Process "https://www.google.com/search?q=$($args -join ' ')" }


#-------------------------- fun --------------------------
Set-Alias -Name 'tk3' -Value Start-tekken3 -Scope Global # fn in this file 
Set-Alias -Name 'mk3' -Value Start-MK3 -Scope Global # fn in this file
function yt { $lnk = iif ($args.Length -eq 0) "https://www.youtube.com/" "https://www.youtube.com/results?search_query=$($args -join ' ')"; Start-Process $lnk }

#having last output at hand
$PSDefaultParameterValues["Out-Default:OutVariable"] = "lstOut" #call it, of course $lstOut

# -------------------------- SETTING UP REQUIRED MODULES ------------------------------
# requiref modules are here. Yes to [A]ll  on install request 
# more on Pester https://pester.dev/docs/introduction/installation 
# ⭐⭐⭐⭐⭐     
$modulesListToInstall = @('ImportExcel', 'PowerShellCookbook', 'Pester')
$modulesListToInstall | ForEach-Object {
    if (    -not (Get-Module $_ -ListAvailable)   ) {   Install-Module -Name $_ -AllowClobber   }
}


#  PROMPT
function prompt {
    ##############################################################################
    ##
    ## From PowerShell Cookbook (O'Reilly) --> was taken as base and severely reworked: SR [2022-11-01]
    ## by Lee Holmes (http://www.leeholmes.com/guide)
    ##
    ##############################################################################
    # ⭐⭐⭐⭐
    $historyItem = Get-History -Count 1
    
    if ($null -ne $historyItem) {
        $prevId = $historyItem.Id
        $id = $historyItem.Id + 1
        
    }	
    else {
        $prevId = 0
        $id = 1
        
    }    
    ###################################### GIT #####################################
    
    # SR: core solution for cmm diff based on 
    #   https://stackoverflow.com/questions/20433867/git-ahead-behind-info-between-master-and-branch
    #   https://stackoverflow.com/questions/2180270/check-if-current-directory-is-a-git-repository
    $isGitDir = git rev-parse --is-inside-work-tree 2>$null
    if ($null -ne $isGitDir) {
        $currBr = git branch --show-current
        $mainBrName = ((grep .\.git\config -Pattern 'merge')[0]).ToString().split("/")[2]
        $compMain = git rev-list --left-right --count origin/$mainBrName...origin/$currBr

        $mainBrAhead = iif (    $compMain[1] -eq [byte][char]9  ) $compMain[0] $compMain[0]+$compMain[1]
        try {
            $currBrAhead = $compMain[2] + $compMain[3]
        }
        catch {
            $currBrAhead = $compMain[2]        
        }
        
        Write-Host -NoNewline -BackgroundColor Green -ForegroundColor Black `
            "[$(git branch --show-current)]±($($currBrAhead);$($mainBrAhead))>>"
    }
    else {
        Write-Host -NoNewline -BackgroundColor Green -ForegroundColor Black "[~not a GIT~]>>"
    }
    
    ###################################### LOCA #####################################
    $pathStart = Get-Location | Split-Path -Qualifier
    $pathEnd = Get-Location | Resolve-Path -Relative
    $pathEndCombined = (( grep -Inp $pathEnd -Patt '(-| |\\|_).' -A | ForEach-Object { $_.matches.value } ) -join '').trim()
    
    ################################## EXEC Time #####################################
    Write-Host -NoNewline -BackgroundColor DarkBlue -ForegroundColor White `
        "$($pathStart)" "..$($pathEndCombined) >>"     
    Write-Host -NoNewLine -BackgroundColor Yellow -ForegroundColor Black " PS:$prevId->"
    # identifying running time of the last command:
    if ($historyItem) {
        $ms = $((
	        (Get-History -Count 1).Duration 
            ).TotalMilliseconds / 1000 )
    }
    else {
        $ms = 0
    }
    Write-Host -NoNewLine -BackgroundColor Yellow -ForegroundColor Black "[$([math]::Round($ms,3))s]>>"
    Write-Host -NoNewLine -BackgroundColor DarkRed -ForegroundColor White " PS:$id >"
    break # to stop terminal line from do some automatic scripting
}
#  SAVE SETTINGS
function save-settings {
    # Backs up settings from respective VS Code keybindings and from PS $PROFILE to files in ProjectSettings
    # ⭐⭐⭐⭐
    Get-Content 'C:\Users\Sergey\AppData\Roaming\Code\User\settings.json' > 'D:\Projects\PBI Tools\Power-BI-Version-Control-repository\ProjectSettings\vs_userSetings'
    Get-Content 'D:\Projects\PBI Tools\Power-BI-Version-Control-repository\.git\config' > 'D:\Projects\PBI Tools\Power-BI-Version-Control-repository\ProjectSettings\git_config'
    Get-Content 'C:\Users\Sergey\AppData\Roaming\Code\User\keybindings.json' > 'D:\Projects\PBI Tools\Power-BI-Version-Control-repository\ProjectSettings\vs_keybindings'
    Get-Content $PROFILE > 'D:\Projects\PBI Tools\Power-BI-Version-Control-repository\ProjectSettings\PROFILE'
}

# --------------------------
# other

function Get-NetHelp ([string] $PWSCmdletName) {
    # dnh
    # $PWSCmdletName -- name of PowerShell cmd-let for which you want to get .Net help
    ### When the Get-Member cmdlet doesn’t provide the information you need, the Microsoft documentation for a type is a great alternative. [Holmes, 128]
    # ⭐

    if ($PWSCmdletName -eq "") {
        Start-Process "https://learn.microsoft.com/en-us/dotnet/"
        exit
    }
    $PWSCmdletName = [scriptblock]::Create($PWSCmdletName).Invoke()[0].GetType().toString()
    Start-Process "https://learn.microsoft.com/en-us/search/?terms=$PWSCmdletName&scope=.NET"
}


function Start-Book ([string] $book) {   
    # ⭐⭐⭐ 4 practice -- starts a script that opens a book. Just to skip explorers and mousclicks. 
    if ($book -eq "") 
    { Get-ChildItem "$home\Desktop\PS Launcher\" } 
    else { 
        $nm = ( Get-ChildItem "$home\Desktop\PS Launcher\"  | Select-Object Name | Where-Object Name -like "*$book*").Name; 
        &  "$home\Desktop\PS Launcher\$nm" 
    }
    # Write-Host "book = $book; nm = $nm"   
}
function Get-CommandForContext($context) {
    # [System.ComponentModel.Description("Context=Website")] --> tags other functions for this Fn could categorize them Holmes [328]
    Get-Command -CommandType Function |
    Where-Object { $_.ScriptBlock.Attributes |
        Where-Object { $_.Description -eq "Context=$context" } }
}
function Get-Verbs { get-verb | clip && np } # lists correct verbs in NotePad++. NP is fn in this file


# --------------------------
## functions for fun
function Start-tekken3 { Start-Process "https://www.retrogames.cc/psx-games/tekken-3.html" }
function Start-MK3 { Start-Process "https://www.retrogames.cc/psx-games/mortal-kombat-3.html" }

